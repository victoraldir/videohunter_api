// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victoraldir/myvideohunterbsky/repository/dynamodb (interfaces: DynamodDBClient)
//
// Generated by this command:
//
//	mockgen -destination=../dynamodb/mocks/mockDynamodDBClient.go -package=dynamodb github.com/victoraldir/myvideohunterbsky/repository/dynamodb DynamodDBClient
//

// Package dynamodb is a generated GoMock package.
package dynamodb

import (
	reflect "reflect"

	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
	gomock "go.uber.org/mock/gomock"
)

// MockDynamodDBClient is a mock of DynamodDBClient interface.
type MockDynamodDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodDBClientMockRecorder
	isgomock struct{}
}

// MockDynamodDBClientMockRecorder is the mock recorder for MockDynamodDBClient.
type MockDynamodDBClientMockRecorder struct {
	mock *MockDynamodDBClient
}

// NewMockDynamodDBClient creates a new mock instance.
func NewMockDynamodDBClient(ctrl *gomock.Controller) *MockDynamodDBClient {
	mock := &MockDynamodDBClient{ctrl: ctrl}
	mock.recorder = &MockDynamodDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodDBClient) EXPECT() *MockDynamodDBClientMockRecorder {
	return m.recorder
}

// GetItem mocks base method.
func (m *MockDynamodDBClient) GetItem(input *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", input)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockDynamodDBClientMockRecorder) GetItem(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockDynamodDBClient)(nil).GetItem), input)
}

// PutItem mocks base method.
func (m *MockDynamodDBClient) PutItem(input *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutItem", input)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItem indicates an expected call of PutItem.
func (mr *MockDynamodDBClientMockRecorder) PutItem(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockDynamodDBClient)(nil).PutItem), input)
}
