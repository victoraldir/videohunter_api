// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victoraldir/myvideohunterapi/usecases (interfaces: GetUrlUseCase)
//
// Generated by this command:
//
//	mockgen -destination=../usecases/mocks/mockGetUrlUseCase.go -package=usecases github.com/victoraldir/myvideohunterapi/usecases GetUrlUseCase
//

// Package usecases is a generated GoMock package.
package usecases

import (
	reflect "reflect"

	events "github.com/victoraldir/myvideohunterapi/events"
	gomock "go.uber.org/mock/gomock"
)

// MockGetUrlUseCase is a mock of GetUrlUseCase interface.
type MockGetUrlUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetUrlUseCaseMockRecorder
}

// MockGetUrlUseCaseMockRecorder is the mock recorder for MockGetUrlUseCase.
type MockGetUrlUseCaseMockRecorder struct {
	mock *MockGetUrlUseCase
}

// NewMockGetUrlUseCase creates a new mock instance.
func NewMockGetUrlUseCase(ctrl *gomock.Controller) *MockGetUrlUseCase {
	mock := &MockGetUrlUseCase{ctrl: ctrl}
	mock.recorder = &MockGetUrlUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUrlUseCase) EXPECT() *MockGetUrlUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetUrlUseCase) Execute(arg0 string) (*events.GetVideoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*events.GetVideoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetUrlUseCaseMockRecorder) Execute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetUrlUseCase)(nil).Execute), arg0)
}
