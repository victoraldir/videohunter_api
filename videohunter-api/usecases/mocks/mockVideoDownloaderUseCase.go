// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victoraldir/myvideohunterapi/usecases (interfaces: VideoDownloaderUseCase)
//
// Generated by this command:
//
//	mockgen -destination=../usecases/mocks/mockVideoDownloaderUseCase.go -package=usecases github.com/victoraldir/myvideohunterapi/usecases VideoDownloaderUseCase
//

// Package usecases is a generated GoMock package.
package usecases

import (
	reflect "reflect"

	events "github.com/victoraldir/myvideohunterapi/events"
	gomock "go.uber.org/mock/gomock"
)

// MockVideoDownloaderUseCase is a mock of VideoDownloaderUseCase interface.
type MockVideoDownloaderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockVideoDownloaderUseCaseMockRecorder
}

// MockVideoDownloaderUseCaseMockRecorder is the mock recorder for MockVideoDownloaderUseCase.
type MockVideoDownloaderUseCaseMockRecorder struct {
	mock *MockVideoDownloaderUseCase
}

// NewMockVideoDownloaderUseCase creates a new mock instance.
func NewMockVideoDownloaderUseCase(ctrl *gomock.Controller) *MockVideoDownloaderUseCase {
	mock := &MockVideoDownloaderUseCase{ctrl: ctrl}
	mock.recorder = &MockVideoDownloaderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoDownloaderUseCase) EXPECT() *MockVideoDownloaderUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockVideoDownloaderUseCase) Execute(arg0 string) (*events.CreateVideoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*events.CreateVideoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockVideoDownloaderUseCaseMockRecorder) Execute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockVideoDownloaderUseCase)(nil).Execute), arg0)
}
